knitr::opts_chunk$set(echo = TRUE)
setwd(readClipboard())
print(readClipboard())
knitr::opts_chunk$set(echo = TRUE)
setwd(readClipboard())
print(readClipboard())
D = read.table("breast-cancer-wisconsin.data",sep = ",", na.strings = "?")
print(class(D))
print(str(D))
print(head(D))
summary(D)
missval<-which(complete.cases(D)== F)
# Retourne la liste des numÃ©ros d'observation comportant des valeurs manquantes
print(missval)
print(length(missval))
D<-D[which(complete.cases(D)),]
X<-D[,c(2:10)]
y<-D[,11]
y<-factor(y)
levels(y) <- c(0,1)
benin<-which(y==0)
malin<-which(y==1)
train_set <- head(benin,200)
Xtrain <- X[train_set,]
ytrain<- y[train_set]
test_set <- c(benin[201:444],malin)
Xtest <- X[test_set,]
ytest <-y[test_set]
library(e1071)
oc_svm_fit <- svm(as.matrix(X[train_set,]),y=NULL,kernel = "radial", type ="one-classification" , gamma = 1/2)
oc_svm_fit
oc_svm_pred_test  <- predict(oc_svm_fit, X[test_set,],decision.values = TRUE)
attr (oc_svm_pred_test ,"decision.values")
oc_svm_score_test = -as.numeric(attr(oc_svm_pred_test,"decision.values&"))
library(ROCR)
pred_oc_svm=prediction(oc_svm_score_test,y[test_set])
library(ROCR)
pred_oc_svm=prediction(oc_svm_score_test,y[test_set])
oc_svm_pred_test  <- predict(oc_svm_fit, X[test_set,],decision.values = TRUE)
attr (oc_svm_pred_test ,"decision.values")
oc_svm_score_test = -as.numeric(attr(oc_svm_pred_test,"decision.values&"))
library(ROCR)
pred_oc_svm=prediction(oc_svm_score_test,y[test_set])
attr (oc_svm_pred_test ,"decision.values")
oc_svm_score_test = -as.numeric(attr(oc_svm_pred_test,"decision.values"))
library(ROCR)
pred_oc_svm=prediction(oc_svm_score_test,y[test_set])
oc_svm_roc = performance(pred_oc_svm, measure = "tpr", x.measure = "fpr")
plot(oc_svm_roc)
library(kernlab)
kernel=rbfdot(sigma=1/8)
Ktrain=kernelMatrix(kernel,X[train_set,])
k2=apply(Ktrain,1,sum)
kernel
Ktrain
X[train_set,]
?kernelMatrix
library(kernlab)
kernel=rbfdot(sigma=1/8)
Ktrain=kernelMatrix(kernel,X[train_set,])
Ktrain
k2=apply(Ktrain,1,sum)
?apply
k2=apply(Ktrain,1,sum) # lignes
train_set <- head(benin,200)
Xtrain <- as.matrix(X[train_set,])
ytrain<- as.matrix(y[train_set])
test_set <- c(benin[201:444],malin)
Xtest <- as.matrix(X[test_set,])
ytest <-as.matrix(y[test_set])
oc_svm_pred_test  <- predict(oc_svm_fit, X[test_set,],decision.values = TRUE)
attr (oc_svm_pred_test ,"decision.values")
oc_svm_score_test = -as.numeric(attr(oc_svm_pred_test,"decision.values"))
library(ROCR)
pred_oc_svm=prediction(oc_svm_score_test,y[test_set])
oc_svm_roc = performance(pred_oc_svm, measure = "tpr", x.measure = "fpr")
plot(oc_svm_roc)
library(kernlab)
kernel=rbfdot(sigma=1/8)
Ktrain=kernelMatrix(kernel,X[train_set,])
kernel
Ktrain
Ktrain
Ktrain
k2=apply(Ktrain,1,sum) # lignes
library(kernlab)
kernel=rbfdot(sigma=1/8)
Ktrain=kernelMatrix(kernel,as.matrix(X[train_set,]))
kernel
Ktrain
k2=apply(Ktrain,1,sum) # lignes
k3=apply(Ktrain,2,sum) # colonnes
k4=sum(Ktrain)
KtrainCent=matrix(0,ncol=n,nrow=n)
k2=apply(Ktrain,1,sum) # lignes
k3=apply(Ktrain,2,sum) # colonnes
k4=sum(Ktrain)
n=nrow(Ktrain)
KtrainCent=matrix(0,ncol=n,nrow=n)
for (i in 1:n)
{
for (j in 1:n)
{
KtrainCent[i,j]=Ktrain[i,j]-1/n*k2[i]-1/n*k3[j]+1/n^2*k4
}
}
eigen_KtrainCent = eigen(KtrainCent)
eigen_KtrainCent = eigen(KtrainCent)
eigen_KtrainCent
s = 80
A=eigen_KtrainCent$vectors[,1:s]%*%diag(1/sqrt(
eigen_KtrainCent$values[1:s]))
A
K=kernelMatrix(kernel,X)
# calculer le premier  n  terme de la formule (4)
p1=as.numeric(diag(K))
# calculer le deuxieme terme de la formule (4)
p2=as.numeric(-2/n*apply(K[,train_set],1,sum))
# calculer le premier  n  terme de la formule (4)
p1=as.numeric(diag(K))
# calculer le deuxieme terme de la formule (4)
p2=as.numeric(-2/n*apply(as.matrix(K[,train_set]),1,sum))
# calculer le premier  n  terme de la formule (4)
p1=as.numeric(diag(K))
# calculer le deuxieme terme de la formule (4)
p2=as.numeric(-2/n*apply(as.matrix(K[,train_set]),1,sum))
ps=p1[test_set]+p2[test_set]+p3
f1=K[,train_set]%*% A
